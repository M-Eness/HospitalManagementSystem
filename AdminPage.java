/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.bp2project;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mehmetenes
 */
public class AdminPage extends javax.swing.JFrame {

    /**
     * Creates new form AdminPage
     */
    // Default table modeller tanımlıyorum
    public static DefaultTableModel doktorList;
    public static DefaultTableModel randevuList;

    public AdminPage() {
        initComponents();
        // Tablo modellerini alıp ve DefaultTableModel nesnelerine dönüştürüyorum.
        doktorList = (DefaultTableModel) doctorTable.getModel();
        randevuList = (DefaultTableModel) randevuTablo.getModel();

        // bugünden önceki günler seçilmemesi için
        Date today = new Date();
        calendarDüzenle.setMinSelectableDate(today);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        addBut = new javax.swing.JButton();
        uptadeBut = new javax.swing.JButton();
        deleteBut = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        safeExitBut1 = new javax.swing.JButton();
        nameText = new javax.swing.JTextField();
        surnameText = new javax.swing.JTextField();
        fieldCombo = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        ssnText = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        doctorTable = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientList = new javax.swing.JList<>();
        hastaListelemeBut = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        textHeight = new javax.swing.JTextField();
        textName = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        textWeight = new javax.swing.JTextField();
        textSurname = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        textPassword = new javax.swing.JTextField();
        textSsn = new javax.swing.JTextField();
        checkboxConfirm = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        düzenleHasta = new javax.swing.JButton();
        textGender = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        textAge = new javax.swing.JTextField();
        ekleHastaButon = new javax.swing.JButton();
        silHastaButon = new javax.swing.JButton();
        safeExitBut = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        calendarDüzenle = new com.toedter.calendar.JDateChooser();
        jLabel17 = new javax.swing.JLabel();
        comboTimeDüzenle = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        comboFieldDüzenle = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        randevuTablo = new javax.swing.JTable();
        randevuSil = new javax.swing.JButton();
        düzenleBut = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        comboDoctorDüzenle = new javax.swing.JComboBox<>();
        safeExitBut2 = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        exportItem = new javax.swing.JMenuItem();
        exitItem = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jLabel7.setText("Field:");

        jLabel8.setText("SSN:");

        jLabel9.setText("Surname:");

        addBut.setText("ADD");
        addBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButActionPerformed(evt);
            }
        });

        uptadeBut.setText("UPTADE");
        uptadeBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uptadeButActionPerformed(evt);
            }
        });

        deleteBut.setText("DELETE");
        deleteBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButActionPerformed(evt);
            }
        });

        jPanel6.setBackground(new java.awt.Color(0, 0, 0));

        safeExitBut1.setBackground(new java.awt.Color(0, 0, 0));
        safeExitBut1.setForeground(new java.awt.Color(255, 255, 255));
        safeExitBut1.setText("Safely Exit");
        safeExitBut1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                safeExitButActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(safeExitBut1)
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addComponent(safeExitBut1)
                .addContainerGap(182, Short.MAX_VALUE))
        );

        fieldCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cardiology", "Dermatology", "Emergency Medicine", "General Surgery", "Internal Medicine", "Neurology", "Pediatrics" }));

        jLabel11.setText("Name:");

        doctorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Doctor Ssn ", "Doctor Name ", "Doctor Surname", "Doctor Field"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        doctorTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doctorTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(doctorTable);
        if (doctorTable.getColumnModel().getColumnCount() > 0) {
            doctorTable.getColumnModel().getColumn(0).setResizable(false);
            doctorTable.getColumnModel().getColumn(1).setResizable(false);
            doctorTable.getColumnModel().getColumn(2).setResizable(false);
            doctorTable.getColumnModel().getColumn(3).setResizable(false);
        }

        jPanel5.setBackground(new java.awt.Color(0, 0, 0));
        jPanel5.setForeground(new java.awt.Color(255, 255, 255));

        jLabel21.setBackground(new java.awt.Color(0, 0, 0));
        jLabel21.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("WELCOME ADMIN");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(394, 394, 394)
                .addComponent(jLabel21)
                .addContainerGap(422, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jPanel8.setBackground(new java.awt.Color(0, 0, 0));
        jPanel8.setForeground(new java.awt.Color(255, 255, 255));

        jLabel13.setBackground(new java.awt.Color(0, 0, 0));
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("DOCTOR LIST");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel13)
                .addGap(396, 396, 396))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addComponent(jLabel13)
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 926, Short.MAX_VALUE))
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(52, 52, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(188, 188, 188)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel8)
                        .addComponent(ssnText, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(42, 42, 42)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel11)
                        .addComponent(jLabel7)
                        .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(fieldCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(56, 56, 56)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel9)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(addBut)
                                .addComponent(surnameText, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(uptadeBut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(deleteBut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addContainerGap(214, Short.MAX_VALUE)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(162, 162, 162)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel11)
                                .addComponent(jLabel9))
                            .addGap(29, 29, 29)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(surnameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(deleteBut)))
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addComponent(jLabel8)
                            .addGap(29, 29, 29)
                            .addComponent(ssnText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(18, 18, 18)
                    .addComponent(jLabel7)
                    .addGap(7, 7, 7)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addBut)
                            .addComponent(uptadeBut))
                        .addComponent(fieldCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(631, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("Manage Doctors", jPanel4);

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));

        patientList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patientListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(patientList);

        hastaListelemeBut.setText("List All Patients");
        hastaListelemeBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hastaListelemeButActionPerformed(evt);
            }
        });

        jLabel12.setText("Height:");

        jLabel1.setText("Name:");

        jLabel14.setText("Weight:");

        jLabel3.setText("Surname:");

        jLabel15.setText("Password:");

        jLabel4.setText("Ssn:");

        checkboxConfirm.setText("Confirm");

        jLabel5.setText("Gender:");

        düzenleHasta.setText("Uptade");
        düzenleHasta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                düzenleHastaActionPerformed(evt);
            }
        });

        jLabel6.setText("Age:");

        ekleHastaButon.setText("Add");
        ekleHastaButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ekleHastaButonActionPerformed(evt);
            }
        });

        silHastaButon.setText("Delete");
        silHastaButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                silHastaButonActionPerformed(evt);
            }
        });

        safeExitBut.setBackground(new java.awt.Color(0, 0, 0));
        safeExitBut.setForeground(new java.awt.Color(255, 255, 255));
        safeExitBut.setText("Safely Exit");
        safeExitBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                safeExitButActionPerformed(evt);
            }
        });

        jPanel7.setBackground(new java.awt.Color(0, 0, 0));
        jPanel7.setForeground(new java.awt.Color(255, 255, 255));

        jLabel20.setBackground(new java.awt.Color(0, 0, 0));
        jLabel20.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("WELCOME ADMIN");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(370, 370, 370)
                .addComponent(jLabel20)
                .addContainerGap(446, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hastaListelemeBut)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel9Layout.createSequentialGroup()
                                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(48, 48, 48)
                                            .addComponent(textGender, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel9Layout.createSequentialGroup()
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(48, 48, 48)
                                            .addComponent(textSsn, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel9Layout.createSequentialGroup()
                                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(33, 33, 33)
                                            .addComponent(textSurname, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel9Layout.createSequentialGroup()
                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(48, 48, 48)
                                            .addComponent(textName, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(86, 86, 86)
                                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel9Layout.createSequentialGroup()
                                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(textPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel9Layout.createSequentialGroup()
                                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(48, 48, 48)
                                            .addComponent(textWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel9Layout.createSequentialGroup()
                                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(48, 48, 48)
                                            .addComponent(textHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(48, 48, 48)
                                            .addComponent(textAge, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(jPanel9Layout.createSequentialGroup()
                                    .addComponent(checkboxConfirm)
                                    .addGap(51, 51, 51)
                                    .addComponent(silHastaButon)
                                    .addGap(101, 101, 101)
                                    .addComponent(düzenleHasta)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ekleHastaButon)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 604, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(62, 62, 62)
                        .addComponent(safeExitBut)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hastaListelemeBut)
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(safeExitBut))
                .addGap(61, 61, 61)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textSurname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textSsn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(30, 30, 30)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkboxConfirm)
                    .addComponent(düzenleHasta)
                    .addComponent(ekleHastaButon)
                    .addComponent(silHastaButon))
                .addContainerGap(231, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Manage Patients", jPanel9);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(204, 204, 204));

        jLabel16.setText("Select Date: ");

        calendarDüzenle.setMinSelectableDate(new java.util.Date(-62135776739000L));

        jLabel17.setText("Select Time:");

        comboTimeDüzenle.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "9:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00" }));

        jLabel18.setText("Select Field:");

        comboFieldDüzenle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboFieldDüzenleActionPerformed(evt);
            }
        });

        randevuTablo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(randevuTablo);
        if (randevuTablo.getColumnModel().getColumnCount() > 0) {
            randevuTablo.getColumnModel().getColumn(0).setResizable(false);
            randevuTablo.getColumnModel().getColumn(1).setResizable(false);
            randevuTablo.getColumnModel().getColumn(2).setResizable(false);
            randevuTablo.getColumnModel().getColumn(3).setResizable(false);
        }

        randevuSil.setText("Delete Appointment");
        randevuSil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randevuSilActionPerformed(evt);
            }
        });

        düzenleBut.setText("Update Appointment");
        düzenleBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                düzenleButActionPerformed(evt);
            }
        });

        jLabel19.setText("Select Doctor:");

        safeExitBut2.setBackground(new java.awt.Color(0, 0, 0));
        safeExitBut2.setForeground(new java.awt.Color(255, 255, 255));
        safeExitBut2.setText("Safely Exit");
        safeExitBut2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                safeExitButActionPerformed(evt);
            }
        });

        jPanel10.setBackground(new java.awt.Color(0, 0, 0));
        jPanel10.setForeground(new java.awt.Color(255, 255, 255));

        jLabel22.setBackground(new java.awt.Color(0, 0, 0));
        jLabel22.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText("WELCOME ADMIN");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(381, 381, 381)
                .addComponent(jLabel22)
                .addContainerGap(435, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 822, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addGap(18, 18, 18)
                                .addComponent(comboFieldDüzenle, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(jLabel16)
                                .addGap(18, 18, 18)
                                .addComponent(calendarDüzenle, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel19)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboDoctorDüzenle, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel17)
                                .addGap(18, 18, 18)
                                .addComponent(comboTimeDüzenle, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(safeExitBut2))
                        .addGap(46, 46, 46)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(randevuSil, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(düzenleBut))
                        .addGap(46, 46, 46)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 107, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel16)
                                .addComponent(calendarDüzenle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel18)
                                .addComponent(comboFieldDüzenle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(comboDoctorDüzenle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17)
                            .addComponent(comboTimeDüzenle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(düzenleBut)
                        .addGap(18, 18, 18)
                        .addComponent(randevuSil)))
                .addGap(37, 37, 37)
                .addComponent(safeExitBut2)
                .addGap(194, 194, 194))
        );

        jTabbedPane1.addTab("Manage Appointments", jPanel1);

        jMenu1.setText("File");

        exportItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.META_DOWN_MASK));
        exportItem.setText("Export Patient List");
        exportItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportItemActionPerformed(evt);
            }
        });
        jMenu1.add(exportItem);

        jMenuBar1.add(jMenu1);

        exitItem.setText("Exit");

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.META_DOWN_MASK));
        jMenuItem3.setText("Safely Exit");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        exitItem.add(jMenuItem3);

        jMenuBar1.add(exitItem);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 930, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 906, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // Frame açıldığında yapılacak işlemler
        // Doktor tablosu sqlden alınan verilerle doldurulur
        try {
            Connection con = DatabaseManager.getConnection();

            // Veri gösterme
            String sqlSelect = "SELECT Ssn, name, surname, field FROM person WHERE position = 'Doctor' ";
            Statement statement = con.createStatement();
            ResultSet resultSet = statement.executeQuery(sqlSelect);

            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("Doctor SSN");
            model.addColumn("Doctor Name");
            model.addColumn("Doctor Surname");
            model.addColumn("Doctor Field");

            while (resultSet.next()) {
                String dbSsn = resultSet.getString("Ssn");
                String dbName = resultSet.getString("name");
                String dbSurname = resultSet.getString("surname");
                String dbField = resultSet.getString("field");
                model.addRow(new Object[]{dbSsn, dbName, dbSurname, dbField});
                doctorTable.setModel(model);
            }

            resultSet.close();

            resultSet.close();
            statement.close();

        } catch (Exception e) {
            e.printStackTrace();
        }

        // Var olan doktorların alanlarına göre comboboxtaki alan seçeneklerini düzenler.
        try {
            Connection connection = DatabaseManager.getConnection();
            String query = "SELECT field FROM person";
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                String field = resultSet.getString("field");
                if (field != null) {
                    if (!DatabaseManager.checkAlreadyExists(comboFieldDüzenle, field)) {
                        comboFieldDüzenle.addItem(field);// düzenleme ekranı

                    }
                }
            }
            resultSet.close();
            preparedStatement.close();
            connection.close();

        } catch (Exception e) {
            e.printStackTrace();
        }

        DatabaseManager.randevuGöster(randevuTablo);


    }//GEN-LAST:event_formWindowOpened

    private void addButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButActionPerformed
        // Doktor ekleme işlemi yapılır

        String pos = "Doctor";

        String ssn = ssnText.getText();
        String name = nameText.getText();
        String surname = surnameText.getText();
        String field = (String) fieldCombo.getItemAt(fieldCombo.getSelectedIndex());

        if (ssn.isEmpty() || name.isEmpty() || surname.isEmpty() || field.isEmpty()) {
            JOptionPane.showMessageDialog(null, "All fields must be filled out!", "ERROR", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // Doktor objesi oluşturulur
        Doctor doctor = new Doctor(pos, ssn, name, surname, field);
        // Veri tabanına eklenir
        DatabaseManager.registerDoctor(doctor);

        // Tabloda tüm doktorları göstermek için kveri tabanındaki tüm doktorlar seçilir ve tabloya eklenir
        try {
            Connection con = DatabaseManager.getConnection();

            // Veri gösterme
            String sqlSelect = "SELECT Ssn, name, surname, field FROM person WHERE position = 'Doctor' ";
            Statement statement = con.createStatement();
            ResultSet resultSet = statement.executeQuery(sqlSelect);

            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("Doctor SSN");
            model.addColumn("Doctor Name");
            model.addColumn("Doctor Surname");
            model.addColumn("Doctor Field");

            while (resultSet.next()) {
                String dbSsn = resultSet.getString("Ssn");
                String dbName = resultSet.getString("name");
                String dbSurname = resultSet.getString("surname");
                String dbField = resultSet.getString("field");
                model.addRow(new Object[]{dbSsn, dbName, dbSurname, dbField});
                doctorTable.setModel(model);
            }

            resultSet.close();

            resultSet.close();
            statement.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_addButActionPerformed

    private void uptadeButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uptadeButActionPerformed
        // Seçilen doktorun güncelleme işlemleri yapılır

        int selectedRow = doctorTable.getSelectedRow();

        if (selectedRow == -1) {
            // bir satır seçilmezse mesaj gösterilir
            JOptionPane.showMessageDialog(null, "Please Select a Row", "Caution", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        String oldSsn = (String) doctorTable.getValueAt(selectedRow, 0);
        String desenAd = "^[a-zA-Z\\s]+$";
        String desenSsn = "^\\d{11}$";

        String newSsn = ssnText.getText();
        String newName = nameText.getText();
        String newSurname = surnameText.getText();
        String newField = fieldCombo.getItemAt(fieldCombo.getSelectedIndex());

        if (newSsn.isEmpty() || newName.isEmpty() || newSurname.isEmpty() || newField.isEmpty()) {
            JOptionPane.showMessageDialog(null, "All fields must be filled out!", "Caution", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        Pattern pattern = Pattern.compile(desenAd);
        Pattern pattern2 = Pattern.compile(desenSsn);

        Matcher matcher = pattern.matcher(newName);
        Matcher matcher1 = pattern.matcher(newSurname);
        Matcher matcher2 = pattern2.matcher(newSsn);

        // Girilen değerler kontrol edilir
        if (!matcher.matches() || !matcher1.matches() || !matcher2.matches()) {
            JOptionPane.showMessageDialog(null, "Please enter valid input!!!", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Tablodaki veriler güncellenir
            doctorTable.setValueAt(newSsn, selectedRow, 0);
            doctorTable.setValueAt(newName, selectedRow, 1);
            doctorTable.setValueAt(newSurname, selectedRow, 2);
            doctorTable.setValueAt(newField, selectedRow, 3);

            Connection con = DatabaseManager.getConnection();
            String sql = "UPDATE person SET Ssn = ?, name = ?, surname = ?, field = ? WHERE Ssn = ?";
            PreparedStatement statement = con.prepareStatement(sql);

            statement.setString(1, newSsn);
            statement.setString(2, newName);
            statement.setString(3, newSurname);
            statement.setString(4, newField);
            statement.setString(5, oldSsn);

            int rowsUpdated = statement.executeUpdate();
            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(null, "Succesfully Updated!", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "An error occurred while updating the record.", "ERROR", JOptionPane.ERROR_MESSAGE);
            }

            statement.close();
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error occurred while updating the record.", "ERROR", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }

    }//GEN-LAST:event_uptadeButActionPerformed

    private void deleteButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButActionPerformed
        // Seçilen doktor silinir ve o doktorun mevcut randevularıda silinir

        try {
            int selectedRow = doctorTable.getSelectedRow();
            if (selectedRow != -1) {
                String deleteSsn = (String) doctorTable.getValueAt(selectedRow, 0);
                String deleteName = (String) doctorTable.getValueAt(selectedRow, 1);
                String deleteaSurname = (String) doctorTable.getValueAt(selectedRow, 2);
                String fullName = deleteName.concat(" " + deleteaSurname);

                DefaultTableModel model = (DefaultTableModel) doctorTable.getModel();
                model.removeRow(selectedRow);

                Connection con = DatabaseManager.getConnection();
                Statement statement = con.createStatement();

                String sql = "DELETE FROM person WHERE Ssn = '" + deleteSsn + "'";
                statement.executeUpdate(sql);
                String sql2 = "DELETE FROM randevu WHERE doctorName = '" + fullName + "'";
                statement.execute(sql2);

                JOptionPane.showMessageDialog(null, "Succesfully Deleted!", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
                // Randevu tablosu güncellenir
                DatabaseManager.randevuGöster(randevuTablo);
                statement.close();
                con.close();
            } else {
                JOptionPane.showMessageDialog(null, "Please Select a Row", "ERROR", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_deleteButActionPerformed

    private void hastaListelemeButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hastaListelemeButActionPerformed
        // Tüm hastaların bilgileri listeye aktarılır
        loadPatients();
    }//GEN-LAST:event_hastaListelemeButActionPerformed

    private void loadPatients() {
        // Tüm hastaların bilgileri listeye aktarılır
        DefaultListModel<String> listModel = new DefaultListModel<>();

        try {
            Connection connection = DatabaseManager.getConnection();
            String query = "SELECT Ssn, name, surname, gender, age, height, weight, password FROM person WHERE position = 'Patient'";
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();

            // Sonuçlar liste modeline eklenir
            while (resultSet.next()) {
                String ssn = resultSet.getString("Ssn");
                String name = resultSet.getString("name");
                String surname = resultSet.getString("surname");
                String gender = resultSet.getString("gender");
                String age = resultSet.getString("age");
                String height = resultSet.getString("height");
                String weight = resultSet.getString("weight");
                String password = resultSet.getString("password");

                // Hasta bilgilerini birleştir
                String patientInfo = String.format("SSN: %s, Ad: %s, Soyad: %s, Cinsiyet: %s, Yaş: %s, Boy: %s, Kilo: %s, Şifre: %s", ssn, name, surname, gender, age, height, weight, password);
                listModel.addElement(patientInfo);
            }

            resultSet.close();
            preparedStatement.close();
            connection.close();

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while listing patients.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        // JList liste modeli ile doldurulur
        patientList.setModel(listModel);
    }


    private void düzenleHastaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_düzenleHastaActionPerformed
        // Seçilen Hasta onay kutucuğu işaretlendikten sonra silinir

        if (checkboxConfirm.isSelected()) {

            String newSsn = textSsn.getText().trim();
            String newName = textName.getText().trim();
            String newSurname = textSurname.getText().trim();
            String newGender = textGender.getText().trim();
            String newAge = textAge.getText().trim();
            String newHeight = textHeight.getText().trim();
            String newWeight = textWeight.getText().trim();
            String newPassword = textPassword.getText().trim();

            // Boş alan kontrolü
            if (newSsn.isEmpty() || newName.isEmpty() || newSurname.isEmpty() || newGender.isEmpty()
                    || newAge.isEmpty() || newHeight.isEmpty() || newWeight.isEmpty() || newPassword.isEmpty()) {
                JOptionPane.showMessageDialog(this, "All fields must be filled.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            Patient patient = new Patient("Patient", newSsn, newName, newSurname, newGender, newAge, newHeight, newWeight, newPassword);

            // Girilen değerlerin formata uygunluğunu kontrol et
            if (Patient.patientCheck(patient)) {
                // Herhangi bir hasta seçilmezde NullPointerExcepiton fırlattığı için try-catch kullanıldı
                try {
                    // Seçili hastanın mevcut SSN'i
                    String selectedPatient = patientList.getSelectedValue();
                    String ssn = selectedPatient.substring(5, 16).trim();

                    // Yeni SSN'in benzersiz olup olmadığını kontrol et
                    try {
                        Connection connection = DatabaseManager.getConnection();
                        String ssnCheckQuery = "SELECT COUNT(*) FROM person WHERE Ssn = ?";
                        PreparedStatement ssnCheckStmt = connection.prepareStatement(ssnCheckQuery);
                        ssnCheckStmt.setString(1, newSsn);
                        ResultSet ssnCheckResult = ssnCheckStmt.executeQuery();
                        ssnCheckResult.next();
                        int ssnCount = ssnCheckResult.getInt(1);

                        if (ssnCount > 0 && !newSsn.equals(ssn)) {
                            JOptionPane.showMessageDialog(this, "The entered SSN already exists.", "Error", JOptionPane.ERROR_MESSAGE);
                            return;
                        }

                        // Güncelleme işlemi
                        String updateQuery = "UPDATE person SET Ssn = ?, name = ?, surname = ?, gender = ?, age = ?, height = ?, weight = ?, password = ? WHERE Ssn = ?";
                        PreparedStatement updateStmt = connection.prepareStatement(updateQuery);
                        updateStmt.setString(1, newSsn);
                        updateStmt.setString(2, newName);
                        updateStmt.setString(3, newSurname);
                        updateStmt.setString(4, newGender);
                        updateStmt.setString(5, newAge);
                        updateStmt.setString(6, newHeight);
                        updateStmt.setString(7, newWeight);
                        updateStmt.setString(8, newPassword);
                        updateStmt.setString(9, ssn);
                        updateStmt.executeUpdate();

                        // Güncellenen bilgileri randevu kısmında da güncelliyorum.
                        String updateQuery2 = "UPDATE randevu SET patientSsn = ?, patientName = ?, patientSurname = ? WHERE patientSsn = ?";
                        PreparedStatement updateStmt2 = connection.prepareStatement(updateQuery2);
                        updateStmt2.setString(1, newSsn);
                        updateStmt2.setString(2, newName);
                        updateStmt2.setString(3, newSurname);
                        updateStmt2.setString(4, ssn);
                        updateStmt2.executeUpdate();

                        JOptionPane.showMessageDialog(this, "Patient information is updated successfully.", "Successful", JOptionPane.INFORMATION_MESSAGE);

                        ssnCheckResult.close();
                        ssnCheckStmt.close();
                        updateStmt.close();
                        connection.close();

                        // JList'i güncelle
                        loadPatients();
                        DatabaseManager.randevuGöster(randevuTablo);

                        //Checkboxu sıfırla
                        checkboxConfirm.setSelected(false);

                    } catch (Exception e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "An error occurred while updating patient information.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (NullPointerException e) {
                    //herhangi bir hasta seçilmediği durumda çalışır
                    JOptionPane.showMessageDialog(this, "Please select a patient!!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please confirm the action!", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_düzenleHastaActionPerformed

    private void ekleHastaButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ekleHastaButonActionPerformed
        // Hasta ekleme işlemleri
        String position = "Patient";
        String ssn = textSsn.getText();
        String name = textName.getText();
        String surname = textSurname.getText();
        String gender = textGender.getText();
        String age = textAge.getText();
        String height = textHeight.getText();
        String weight = textWeight.getText();
        String password = textPassword.getText();

        Patient patient = new Patient(position, ssn, name, surname, gender, age, height, weight, password);
        DatabaseManager.registerPatient(patient);

        // JList'i güncelle
        loadPatients();


    }//GEN-LAST:event_ekleHastaButonActionPerformed

    private void silHastaButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_silHastaButonActionPerformed
        // Seçilen hastayı onay kutucuğu işaretlendikten sonra silme işlemi  

        int selectedIndex = patientList.getSelectedIndex();
        if (selectedIndex == -1) {
            JOptionPane.showMessageDialog(this, "Please select the patient you want to delete.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String selectedPatient = patientList.getSelectedValue();
        if (selectedPatient == null || selectedPatient.length() < 16) {
            JOptionPane.showMessageDialog(this, "Invalid patient information.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!checkboxConfirm.isSelected()) {
            JOptionPane.showMessageDialog(this, "Please Tick the Checkbox", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // SSN'yi almak için substring kullanıldı
        String ssn = selectedPatient.substring(5, 16).trim();

        try {
            Connection connection = DatabaseManager.getConnection();
            String query = "DELETE FROM person WHERE Ssn = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setString(1, ssn);

            int rowsDeleted = preparedStatement.executeUpdate();
            // Silinen hastanın varolan randevularını siler
            if (rowsDeleted > 0) {
                JOptionPane.showMessageDialog(this, "The patient is successfully deleted.");

                String query2 = "DELETE FROM randevu WHERE patientSsn = ?";
                PreparedStatement preparedStatement2 = connection.prepareStatement(query2);
                preparedStatement2.setString(1, ssn);
                preparedStatement2.executeUpdate();
                preparedStatement2.close();

                DatabaseManager.randevuGöster(randevuTablo);

                // Liste modelini kullanarak öğeyi kaldırın
                DefaultListModel<String> listModel = (DefaultListModel<String>) patientList.getModel();
                listModel.remove(selectedIndex);
            } else {
                JOptionPane.showMessageDialog(this, "Deletion failed.", "Error", JOptionPane.ERROR_MESSAGE);
            }

            preparedStatement.close();
            connection.close();

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        // text fieldlar sıfırlanır
        textName.setText("");
        textSurname.setText("");
        textSsn.setText("");
        textGender.setText("");
        textHeight.setText("");
        textWeight.setText("");
        textAge.setText("");
        textPassword.setText("");
        checkboxConfirm.setSelected(false);
    }//GEN-LAST:event_silHastaButonActionPerformed


    private void comboFieldDüzenleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboFieldDüzenleActionPerformed

        comboDoctorDüzenle.removeAllItems();
        // Doktorları combobox a getir
        try {
            Connection connection = DatabaseManager.getConnection();
            String query = "SELECT name, surname FROM person WHERE field = ?";

            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setString(1, comboFieldDüzenle.getItemAt(comboFieldDüzenle.getSelectedIndex()));
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                String name = resultSet.getString("name");
                String surname = resultSet.getString("surname");
                String fullName = name.concat(" " + surname);

                comboDoctorDüzenle.addItem(fullName);

            }
            resultSet.close();
            preparedStatement.close();
            connection.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_comboFieldDüzenleActionPerformed

    private void randevuSilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randevuSilActionPerformed
        // Seçilen randevuyu sil
        int selectedRow = randevuTablo.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select the appointment you want to delete.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String patientSsn = randevuTablo.getValueAt(selectedRow, 0).toString();
        String date = randevuTablo.getValueAt(selectedRow, 5).toString();
        String hour = randevuTablo.getValueAt(selectedRow, 6).toString();

        int confirmation = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this appointment?", "Delete Appointment", JOptionPane.YES_NO_OPTION);
        if (confirmation != JOptionPane.YES_OPTION) {
            return;
        }

        //Veri tabanından o randevuyu kaldır
        try {
            Connection connection = DatabaseManager.getConnection();
            String deleteQuery = "DELETE FROM randevu WHERE patientSsn = ? AND date = ? AND hour = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(deleteQuery);
            preparedStatement.setString(1, patientSsn);
            preparedStatement.setString(2, date);
            preparedStatement.setString(3, hour);
            preparedStatement.executeUpdate();

            JOptionPane.showMessageDialog(this, "Appointment deleted successfully.", "Successful", JOptionPane.INFORMATION_MESSAGE);

            preparedStatement.close();
            connection.close();

            // Tabloyu güncelle
            DatabaseManager.randevuGöster(randevuTablo);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while deleting the appointment.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_randevuSilActionPerformed

    private void düzenleButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_düzenleButActionPerformed
        // Seçilen randevuyu güncelle

        int selectedRow = randevuTablo.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select the appointment you want to update.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String oldSsn = randevuTablo.getValueAt(selectedRow, 0).toString();
        String oldDate = randevuTablo.getValueAt(selectedRow, 5).toString();
        String oldTime = randevuTablo.getValueAt(selectedRow, 6).toString();

        // Kullanıcıdan yeni bilgileri al
        String newField = comboFieldDüzenle.getSelectedItem().toString();
        String newDoctor = comboDoctorDüzenle.getSelectedItem().toString();
        Date newDate = calendarDüzenle.getDate();
        if (newDate == null) {
            JOptionPane.showMessageDialog(this, "Enter Date", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String formattedDate = sdf.format(newDate);
        String newTime = comboTimeDüzenle.getSelectedItem().toString();

        try {
            Connection connection = DatabaseManager.getConnection();

            // Aynı doktorun aynı tarih ve saatte randevusu olup olmadığını kontrol et
            String queryDoctor = "SELECT * FROM randevu WHERE doctorName = ? AND date = ? AND hour = ?";
            PreparedStatement preparedStatementDoctor = connection.prepareStatement(queryDoctor);
            preparedStatementDoctor.setString(1, newDoctor);
            preparedStatementDoctor.setString(2, formattedDate);
            preparedStatementDoctor.setString(3, newTime);
            ResultSet resultSetDoctor = preparedStatementDoctor.executeQuery();

            if (resultSetDoctor.next()) {
                JOptionPane.showMessageDialog(this, "This doctor has another appointment at the specified date and time.", "Conflict Error", JOptionPane.ERROR_MESSAGE);
                resultSetDoctor.close();
                preparedStatementDoctor.close();
                connection.close();
                return;
            }

            // Aynı hastanın aynı tarih ve saatte başka randevusu olup olmadığını kontrol et
            String queryPatient = "SELECT * FROM randevu WHERE patientSsn = ? AND date = ? AND hour = ?";
            PreparedStatement preparedStatementPatient = connection.prepareStatement(queryPatient);
            preparedStatementPatient.setString(1, oldSsn);
            preparedStatementPatient.setString(2, formattedDate);
            preparedStatementPatient.setString(3, newTime);
            ResultSet resultSetPatient = preparedStatementPatient.executeQuery();

            if (resultSetPatient.next()) {
                JOptionPane.showMessageDialog(this, "You have another appointment at the specified date and time.", "Conflict Error", JOptionPane.ERROR_MESSAGE);
                resultSetPatient.close();
                preparedStatementPatient.close();
                connection.close();
                return;
            }

            // Randevuyu güncelle
            String updateQuery = "UPDATE randevu SET field = ?, doctorName = ?, date = ?, hour = ? WHERE patientSsn = ? AND date = ? AND hour = ?";
            PreparedStatement preparedStatementUpdate = connection.prepareStatement(updateQuery);
            preparedStatementUpdate.setString(1, newField);
            preparedStatementUpdate.setString(2, newDoctor);
            preparedStatementUpdate.setString(3, formattedDate);
            preparedStatementUpdate.setString(4, newTime);
            preparedStatementUpdate.setString(5, oldSsn);
            preparedStatementUpdate.setString(6, oldDate);
            preparedStatementUpdate.setString(7, oldTime);
            preparedStatementUpdate.executeUpdate();

            JOptionPane.showMessageDialog(this, "Your appointment has been updated successfully.", "Successful", JOptionPane.INFORMATION_MESSAGE);

            preparedStatementUpdate.close();
            connection.close();

            // Tabloyu güncelle
            DatabaseManager.randevuGöster(randevuTablo);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while updating the appointment.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_düzenleButActionPerformed

    private void patientListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientListMouseClicked
        // Listeye tıkalndığında verileri textfieldlara yaz

        String selectedPatient = patientList.getSelectedValue();
        String ssn = selectedPatient.substring(5, 16).trim();

        try {
            Connection connection = DatabaseManager.getConnection();
            String query = "SELECT * FROM person WHERE Ssn = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setString(1, ssn);
            ResultSet resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                textSsn.setText(resultSet.getString("Ssn"));
                textName.setText(resultSet.getString("name"));
                textSurname.setText(resultSet.getString("surname"));
                textGender.setText(resultSet.getString("gender"));
                textAge.setText(resultSet.getString("age"));
                textHeight.setText(resultSet.getString("height"));
                textWeight.setText(resultSet.getString("weight"));
                textPassword.setText(resultSet.getString("password"));

            }
            preparedStatement.close();
            connection.close();

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_patientListMouseClicked

    private void safeExitButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_safeExitButActionPerformed
        // Login sayfasına geri dön
        this.dispose();
        new LoginPage().setVisible(true);
    }//GEN-LAST:event_safeExitButActionPerformed

    private void exportItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportItemActionPerformed
        // Listedeki verileri aynı şekilde dışarı aktar

        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try (FileWriter writer = new FileWriter(file)) {
                // JList'ten model alınır
                ListModel listModel = patientList.getModel();

                // Listenin tüm öğeleri dosyaya yazılır
                for (int i = 0; i < listModel.getSize(); i++) {
                    Object item = listModel.getElementAt(i);
                    writer.write(item.toString() + "\n");
                }
                JOptionPane.showMessageDialog(this, "The items in the list were successfully written to the file.", "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "An error occurred while writing items to the file: ", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_exportItemActionPerformed

    private void doctorTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctorTableMouseClicked
        // Tabloya tıklandığında bilgileri textfield lara aktar

        String ssn = (String) doctorTable.getValueAt(doctorTable.getSelectedRow(), 0);

        try {
            Connection connection = DatabaseManager.getConnection();
            String query = "SELECT * FROM person WHERE Ssn = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setString(1, ssn);
            ResultSet resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                ssnText.setText(resultSet.getString("Ssn"));
                nameText.setText(resultSet.getString("name"));
                surnameText.setText(resultSet.getString("surname"));
                fieldCombo.setSelectedItem(resultSet.getString("field"));
            }

            resultSet.close();
            preparedStatement.close();
            connection.close();

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while fetching the data.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_doctorTableMouseClicked

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new LoginPage().setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBut;
    private com.toedter.calendar.JDateChooser calendarDüzenle;
    private javax.swing.JCheckBox checkboxConfirm;
    private javax.swing.JComboBox<String> comboDoctorDüzenle;
    private javax.swing.JComboBox<String> comboFieldDüzenle;
    private javax.swing.JComboBox<String> comboTimeDüzenle;
    private javax.swing.JButton deleteBut;
    private javax.swing.JTable doctorTable;
    private javax.swing.JButton düzenleBut;
    private javax.swing.JButton düzenleHasta;
    private javax.swing.JButton ekleHastaButon;
    private javax.swing.JMenu exitItem;
    private javax.swing.JMenuItem exportItem;
    private javax.swing.JComboBox<String> fieldCombo;
    private javax.swing.JButton hastaListelemeBut;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField nameText;
    private javax.swing.JList<String> patientList;
    private javax.swing.JButton randevuSil;
    private javax.swing.JTable randevuTablo;
    private javax.swing.JButton safeExitBut;
    private javax.swing.JButton safeExitBut1;
    private javax.swing.JButton safeExitBut2;
    private javax.swing.JButton silHastaButon;
    private javax.swing.JTextField ssnText;
    private javax.swing.JTextField surnameText;
    private javax.swing.JTextField textAge;
    private javax.swing.JTextField textGender;
    private javax.swing.JTextField textHeight;
    private javax.swing.JTextField textName;
    private javax.swing.JTextField textPassword;
    private javax.swing.JTextField textSsn;
    private javax.swing.JTextField textSurname;
    private javax.swing.JTextField textWeight;
    private javax.swing.JButton uptadeBut;
    // End of variables declaration//GEN-END:variables
}
