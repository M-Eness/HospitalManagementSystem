/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.bp2project;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

/**
 *
 * @author mehmetenes
 */
public class PatientPage extends javax.swing.JFrame {

    private Person patient;

    /**
     * Creates new form PatientPage
     */
    public PatientPage(String ssn) {
        initComponents();

        //Bu frame e gelen ssn bilgisine sahip kişinin objesini oluşturuyorum.
        try {
            Connection connection = DatabaseManager.getConnection();
            String query = "SELECT Ssn, name, surname, gender, age, height, weight, password FROM person WHERE Ssn = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setString(1, ssn);
            ResultSet resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                ssn = resultSet.getString("Ssn");
                String position = "Patient";
                String name = resultSet.getString("name");
                String surname = resultSet.getString("surname");
                String gender = resultSet.getString("gender");
                String age = resultSet.getString("age");
                String height = resultSet.getString("height");
                String weight = resultSet.getString("weight");
                String password = resultSet.getString("password");

                patient = new Patient(position, ssn, name, surname, gender, age, height, weight, password);
            }
            resultSet.close();
            preparedStatement.close();
            connection.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
        
        // bugünden önceki günler seçilmemesi için
        Date today = new Date();
        calendar.setMinSelectableDate(today);
        calendarDüzenle.setMinSelectableDate(today);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMonthChooser1 = new com.toedter.calendar.JMonthChooser();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        patientNameLabel = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        comboField = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        comboDoctor = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        calendar = new com.toedter.calendar.JDateChooser();
        randevuEkle = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        comboTime = new javax.swing.JComboBox<>();
        backBut = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        randevuTablo = new javax.swing.JTable();
        düzenleBut = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        comboDoctorDüzenle = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        calendarDüzenle = new com.toedter.calendar.JDateChooser();
        jLabel16 = new javax.swing.JLabel();
        comboTimeDüzenle = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        comboFieldDüzenle = new javax.swing.JComboBox<>();
        randevuSil = new javax.swing.JButton();
        backBut2 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        textName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        textSurname = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        textSsn = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        textGender = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        textAge = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        textHeight = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        textWeight = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        textPassword = new javax.swing.JTextField();
        checkboxConfirm = new javax.swing.JCheckBox();
        butUptade = new javax.swing.JButton();
        backBut1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Welcome ");

        patientNameLabel.setBackground(new java.awt.Color(0, 0, 0));
        patientNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        patientNameLabel.setAlignmentX(10.0F);
        patientNameLabel.setAlignmentY(5.0F);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(320, 320, 320)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(patientNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(47, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(patientNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(48, 48, 48))
        );

        jLabel10.setText("Select Field:");

        comboField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboFieldActionPerformed(evt);
            }
        });

        jLabel11.setText("Select Doctor:");

        jLabel12.setText("Select Date: ");

        randevuEkle.setText("Add Oppointment");
        randevuEkle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randevuEkleActionPerformed(evt);
            }
        });

        jLabel13.setText("Select Time:");

        comboTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "9:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00" }));

        backBut.setBackground(new java.awt.Color(0, 0, 0));
        backBut.setForeground(new java.awt.Color(255, 255, 255));
        backBut.setText("Back to Login Screen");
        backBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addComponent(comboField, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(18, 18, 18)
                        .addComponent(calendar, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(72, 72, 72)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(backBut)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(randevuEkle, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(comboDoctor, 0, 144, Short.MAX_VALUE)
                                .addComponent(comboTime, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(171, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(comboField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(comboDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addComponent(jLabel12))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel13)
                                    .addComponent(comboTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(calendar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addComponent(randevuEkle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 190, Short.MAX_VALUE)
                .addComponent(backBut)
                .addGap(55, 55, 55))
        );

        jTabbedPane1.addTab("New Oppointment", jPanel3);

        randevuTablo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(randevuTablo);
        if (randevuTablo.getColumnModel().getColumnCount() > 0) {
            randevuTablo.getColumnModel().getColumn(0).setResizable(false);
            randevuTablo.getColumnModel().getColumn(1).setResizable(false);
            randevuTablo.getColumnModel().getColumn(2).setResizable(false);
            randevuTablo.getColumnModel().getColumn(3).setResizable(false);
        }

        düzenleBut.setText("Update the Appointment");
        düzenleBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                düzenleButActionPerformed(evt);
            }
        });

        jLabel14.setText("Select Doctor:");

        jLabel15.setText("Select Date: ");

        jLabel16.setText("Select Time:");

        comboTimeDüzenle.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "9:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00" }));

        jLabel17.setText("Select Field:");

        comboFieldDüzenle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboFieldDüzenleActionPerformed(evt);
            }
        });

        randevuSil.setText("Delete the Appointment");
        randevuSil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randevuSilActionPerformed(evt);
            }
        });

        backBut2.setBackground(new java.awt.Color(0, 0, 0));
        backBut2.setForeground(new java.awt.Color(255, 255, 255));
        backBut2.setText("Back to Login Screen");
        backBut2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 790, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addGap(18, 18, 18)
                        .addComponent(comboFieldDüzenle, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jLabel15)
                        .addGap(18, 18, 18)
                        .addComponent(calendarDüzenle, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(backBut2))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboDoctorDüzenle, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel16)
                                .addGap(18, 18, 18)
                                .addComponent(comboTimeDüzenle, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(67, 67, 67)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(randevuSil, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(düzenleBut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel15)
                        .addComponent(calendarDüzenle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel17)
                        .addComponent(comboFieldDüzenle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(düzenleBut))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel16)
                                .addComponent(comboTimeDüzenle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel14)
                                .addComponent(comboDoctorDüzenle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(36, 36, 36)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(randevuSil)
                    .addComponent(backBut2))
                .addGap(21, 21, 21))
        );

        jTabbedPane1.addTab("My Oppointment", jPanel4);

        jLabel1.setText("Name:");

        textName.setEditable(false);

        jLabel3.setText("Surname:");

        textSurname.setEditable(false);

        jLabel4.setText("Ssn:");

        textSsn.setEditable(false);

        jLabel5.setText("Gender:");

        textGender.setEditable(false);

        jLabel6.setText("Age:");

        jLabel7.setText("Height:");

        jLabel8.setText("Weight:");

        jLabel9.setText("Password:");

        checkboxConfirm.setText("Confirm");

        butUptade.setText("Uptade");
        butUptade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butUptadeActionPerformed(evt);
            }
        });

        backBut1.setBackground(new java.awt.Color(0, 0, 0));
        backBut1.setForeground(new java.awt.Color(255, 255, 255));
        backBut1.setText("Back to Login Screen");
        backBut1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48)
                                .addComponent(textGender, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48)
                                .addComponent(textSsn, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(textSurname, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48)
                                .addComponent(textName, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(86, 86, 86)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48)
                                .addComponent(textWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48)
                                .addComponent(textHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48)
                                .addComponent(textAge, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(backBut1)
                                    .addComponent(textPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(266, 266, 266)
                        .addComponent(checkboxConfirm)
                        .addGap(63, 63, 63)
                        .addComponent(butUptade)))
                .addContainerGap(105, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textSurname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textSsn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(98, 98, 98)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkboxConfirm)
                    .addComponent(butUptade))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 124, Short.MAX_VALUE)
                .addComponent(backBut1)
                .addGap(42, 42, 42))
        );

        jTabbedPane1.addTab("Personel Information", jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 778, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 6, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // Frame açıldıpı anda gerçekleşecek işlemler.
        
        //Hasta kişisel bilgilerini göstermek için:
        patientNameLabel.setText(patient.getName());
        textName.setText(patient.getName());
        textSurname.setText(patient.getSurname());
        textSsn.setText(patient.getSsn_number());
        textGender.setText(patient.getGender());
        textAge.setText(patient.getAge());
        textHeight.setText(patient.getHeight());
        textWeight.setText(patient.getWeight());
        textPassword.setText(patient.getPassword());

        // Yeni randevu kısmında alanları getirmek için
        try {
            Connection connection = DatabaseManager.getConnection();
            String query = "SELECT field FROM person";
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                String field = resultSet.getString("field");
                if (field != null) {
                    if (!DatabaseManager.checkAlreadyExists(comboField, field)) {
                        comboField.addItem(field); // ekleme ekranı
                        comboFieldDüzenle.addItem(field);// düzenleme ekranı

                    }
                }
            }
            resultSet.close();
            preparedStatement.close();
            connection.close();

        } catch (Exception e) {
            e.printStackTrace();
        }

        //Hastanın randevularını listelemek için
        DatabaseManager.randevuGöster(patient.getSsn_number(), randevuTablo);


    }//GEN-LAST:event_formWindowOpened

    private void butUptadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butUptadeActionPerformed
         //Hastanın Kişisel bilgilerini güncelliyorum.
         
        String ssn = textSsn.getText();
        String age = textAge.getText();
        String height = textHeight.getText();
        String weight = textWeight.getText();
        String password = textPassword.getText();

        if (checkboxConfirm.isSelected()) {
            // Formata uygunluk kontrol ediliyor.
            String desenHeight = "^\\d{3}$";
            String desenWeight = "^\\d{2,3}$";
            String desenAge = "^\\d{1,2}$";
            String desenPassword = "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z]).{8,20}$";

            //Boşluk durumu kontrol ediliyor.
            if (age.isEmpty() || height.isEmpty() || weight.isEmpty() || password.isEmpty()) {
                JOptionPane.showMessageDialog(null, "All fields must be filled out!", "ERROR", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            Pattern pattern = Pattern.compile(desenHeight);
            Pattern pattern2 = Pattern.compile(desenWeight);
            Pattern pattern3 = Pattern.compile(desenAge);
            Pattern pattern4 = Pattern.compile(desenPassword);

            Matcher matcher = pattern.matcher(height);
            Matcher matcher1 = pattern2.matcher(weight);
            Matcher matcher2 = pattern3.matcher(age);
            Matcher matcher3 = pattern4.matcher(password);

            if (!matcher.matches() || !matcher1.matches() || !matcher2.matches() || !matcher3.matches()) {
                JOptionPane.showMessageDialog(null, "Please enter valid input!!!", "ERROR", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            // Güncelleme işlemi yapılıyor
            try {
                Connection con = DatabaseManager.getConnection();
                String sql = "UPDATE person SET age = ?, height = ?, weight = ?, password = ? WHERE Ssn = ?";
                PreparedStatement statement = con.prepareStatement(sql);

                statement.setString(1, age);
                statement.setString(2, height);
                statement.setString(3, weight);
                statement.setString(4, password);
                statement.setString(5, ssn);

                patient.setAge(age);
                patient.setHeight(height);
                patient.setWeight(weight);
                patient.setPassword(password);

                int rowsUpdated = statement.executeUpdate();
                if (rowsUpdated > 0) {
                    JOptionPane.showMessageDialog(null, "Person is Updated!!!", "", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    System.out.println("Update failed");
                }

                statement.close();
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please confirm your changes", "", JOptionPane.INFORMATION_MESSAGE);
        }
        
        //Labellar güncelleniyor.

        patientNameLabel.setText(patient.getName());
        textName.setText(patient.getName());
        textSurname.setText(patient.getSurname());
        textSsn.setText(patient.getSsn_number());
        textGender.setText(patient.getGender());
        textAge.setText(patient.getAge());
        textHeight.setText(patient.getHeight());
        textWeight.setText(patient.getWeight());
        textPassword.setText(patient.getPassword());


    }//GEN-LAST:event_butUptadeActionPerformed

    private void randevuEkleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randevuEkleActionPerformed
        // randevu ekleyen method
        
        // Bir tarih girildiğinden emin olunuyor.
        if (calendar.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Please Select a Date", "DATE", JOptionPane.INFORMATION_MESSAGE);
        
        // Randevu ekleme işlemi ve randevuyu listelem işlemleri yapılıyor. 
        } else {
            DatabaseManager.randevuEkle(comboTime, comboField, comboDoctor, patient, calendar);
            DatabaseManager.randevuGöster(patient.getSsn_number(), randevuTablo);
        }

    }//GEN-LAST:event_randevuEkleActionPerformed

    private void comboFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboFieldActionPerformed
        //Randevu alınırken seçilen alana göre doktor combobox'ındaki doktor isimlerini günceller.

        comboDoctor.removeAllItems();
        // Doktorları getirmek için kullanılıcak
        try {
            Connection connection = DatabaseManager.getConnection();
            String query = "SELECT name, surname FROM person WHERE field = ?";

            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setString(1, comboField.getItemAt(comboField.getSelectedIndex()));
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                String name = resultSet.getString("name");
                String surname = resultSet.getString("surname");
                String fullName = name.concat(" " + surname);

                comboDoctor.addItem(fullName);

            }
            resultSet.close();
            preparedStatement.close();
            connection.close();

        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_comboFieldActionPerformed

    private void düzenleButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_düzenleButActionPerformed
        // Seçilen randevuyu güncelleme işlemi gerçekleştirilir.

        int selectedRow = randevuTablo.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please Select The Appointment", "CAUTION", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        String oldSsn = randevuTablo.getValueAt(selectedRow, 0).toString();
        String oldDate = randevuTablo.getValueAt(selectedRow, 5).toString();
        String oldTime = randevuTablo.getValueAt(selectedRow, 6).toString();

        // Kullanıcıdan yeni bilgileri al
        String newField = comboFieldDüzenle.getSelectedItem().toString();
        String newDoctor = comboDoctorDüzenle.getSelectedItem().toString();
        Date newDate = calendarDüzenle.getDate();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

        if (newDate == null) {
            JOptionPane.showMessageDialog(this, "Select a Date", "DATE", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        String formattedDate = sdf.format(newDate);
        String newTime = comboTimeDüzenle.getSelectedItem().toString();

        // Aynı bilgileri girip girmediğini kontrol et
        if (formattedDate.equals(oldDate) && newTime.equals(oldTime)) {
            JOptionPane.showMessageDialog(this, "You did not change anything!!", "", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        try {
            Connection connection = DatabaseManager.getConnection();

            // Aynı doktorun aynı tarih ve saatte randevusu olup olmadığını kontrol et
            String queryDoctor = "SELECT * FROM randevu WHERE doctorName = ? AND date = ? AND hour = ?";
            PreparedStatement preparedStatementDoctor = connection.prepareStatement(queryDoctor);
            preparedStatementDoctor.setString(1, newDoctor);
            preparedStatementDoctor.setString(2, formattedDate);
            preparedStatementDoctor.setString(3, newTime);
            ResultSet resultSetDoctor = preparedStatementDoctor.executeQuery();

            if (resultSetDoctor.next()) {
                JOptionPane.showMessageDialog(this, "This doctor has another appointment at the specified date and time!!", "Conflict Error", JOptionPane.ERROR_MESSAGE);
                resultSetDoctor.close();
                preparedStatementDoctor.close();
                connection.close();
                return;
            }

            // Aynı hastanın aynı tarih ve saatte başka randevusu olup olmadığını kontrol et
            String queryPatient = "SELECT * FROM randevu WHERE patientSsn = ? AND date = ? AND hour = ?";
            PreparedStatement preparedStatementPatient = connection.prepareStatement(queryPatient);
            preparedStatementPatient.setString(1, oldSsn);
            preparedStatementPatient.setString(2, formattedDate);
            preparedStatementPatient.setString(3, newTime);
            ResultSet resultSetPatient = preparedStatementPatient.executeQuery();

            if (resultSetPatient.next()) {
                JOptionPane.showMessageDialog(this, "You have another appointment at the specified date and time!!", "Conflict Error", JOptionPane.ERROR_MESSAGE);
                resultSetPatient.close();
                preparedStatementPatient.close();
                connection.close();
                return;
            }

            // Randevuyu güncelle
            String updateQuery = "UPDATE randevu SET field = ?, doctorName = ?, date = ?, hour = ? WHERE patientSsn = ? AND date = ? AND hour = ?";
            PreparedStatement preparedStatementUpdate = connection.prepareStatement(updateQuery);
            preparedStatementUpdate.setString(1, newField);
            preparedStatementUpdate.setString(2, newDoctor);
            preparedStatementUpdate.setString(3, formattedDate);
            preparedStatementUpdate.setString(4, newTime);
            preparedStatementUpdate.setString(5, oldSsn);
            preparedStatementUpdate.setString(6, oldDate);
            preparedStatementUpdate.setString(7, oldTime);
            preparedStatementUpdate.executeUpdate();

            JOptionPane.showMessageDialog(this, "Your appointment has been updated successfully.", "Succsessful", JOptionPane.INFORMATION_MESSAGE);

            preparedStatementUpdate.close();
            connection.close();

            // Tabloyu güncelle
            DatabaseManager.randevuGöster(oldSsn, randevuTablo);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while updating the appointment.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_düzenleButActionPerformed

    private void comboFieldDüzenleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboFieldDüzenleActionPerformed
        //Düzenle ekranında seçilen alana göre seçilebilen doktorları günceller.
        
        comboDoctorDüzenle.removeAllItems();
        // Doktorları getirmek için kullanılıcak
        try {
            Connection connection = DatabaseManager.getConnection();
            String query = "SELECT name, surname FROM person WHERE field = ?";

            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setString(1, comboFieldDüzenle.getItemAt(comboFieldDüzenle.getSelectedIndex()));
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                String name = resultSet.getString("name");
                String surname = resultSet.getString("surname");
                String fullName = name.concat(" " + surname);

                comboDoctorDüzenle.addItem(fullName);

            }
            resultSet.close();
            preparedStatement.close();
            connection.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_comboFieldDüzenleActionPerformed

    private void randevuSilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randevuSilActionPerformed
        // Seçilen randevuyu silme işlemi yapılır.
        
        int selectedRow = randevuTablo.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please Select a Appointment", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String patientSsn = randevuTablo.getValueAt(selectedRow, 0).toString();
        String date = randevuTablo.getValueAt(selectedRow, 5).toString();
        String hour = randevuTablo.getValueAt(selectedRow, 6).toString();
        
        // Kullanıcıdan onay al
        int confirmation = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this appointment?", "Delete Appointment", JOptionPane.YES_NO_OPTION);
        if (confirmation != JOptionPane.YES_OPTION) {
            return;
        }

        try {
            Connection connection = DatabaseManager.getConnection();
            String deleteQuery = "DELETE FROM randevu WHERE patientSsn = ? AND date = ? AND hour = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(deleteQuery);
            preparedStatement.setString(1, patientSsn);
            preparedStatement.setString(2, date);
            preparedStatement.setString(3, hour);
            preparedStatement.executeUpdate();

            JOptionPane.showMessageDialog(this, "The appointment has been deleted successfully.", "Successful", JOptionPane.INFORMATION_MESSAGE);

            preparedStatement.close();
            connection.close();

            // Tabloyu güncelle
            DatabaseManager.randevuGöster(patientSsn, randevuTablo);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while deleting the appointment.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_randevuSilActionPerformed

    private void backButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButActionPerformed
        // Login sayfasına geri dön
        this.dispose();
        new LoginPage().setVisible(true);
    }//GEN-LAST:event_backButActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PatientPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PatientPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PatientPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PatientPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PatientPage("").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBut;
    private javax.swing.JButton backBut1;
    private javax.swing.JButton backBut2;
    private javax.swing.JButton butUptade;
    private com.toedter.calendar.JDateChooser calendar;
    private com.toedter.calendar.JDateChooser calendarDüzenle;
    private javax.swing.JCheckBox checkboxConfirm;
    private javax.swing.JComboBox<String> comboDoctor;
    private javax.swing.JComboBox<String> comboDoctorDüzenle;
    private javax.swing.JComboBox<String> comboField;
    private javax.swing.JComboBox<String> comboFieldDüzenle;
    private javax.swing.JComboBox<String> comboTime;
    private javax.swing.JComboBox<String> comboTimeDüzenle;
    private javax.swing.JButton düzenleBut;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private com.toedter.calendar.JMonthChooser jMonthChooser1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel patientNameLabel;
    private javax.swing.JButton randevuEkle;
    private javax.swing.JButton randevuSil;
    private javax.swing.JTable randevuTablo;
    private javax.swing.JTextField textAge;
    private javax.swing.JTextField textGender;
    private javax.swing.JTextField textHeight;
    private javax.swing.JTextField textName;
    private javax.swing.JTextField textPassword;
    private javax.swing.JTextField textSsn;
    private javax.swing.JTextField textSurname;
    private javax.swing.JTextField textWeight;
    // End of variables declaration//GEN-END:variables
}
